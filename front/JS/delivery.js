// delivery.js
document.addEventListener('DOMContentLoaded', function() {
    let selectedVehicle = null;
    let officeCoords = [59.820540, 30.370800];
    let destinationCoords = null;
    let map = null;
    let officePlacemark = null;
    let destinationPlacemark = null;
    let currentRoute = null;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
    function initDeliveryMap() {
        if (typeof ymaps !== 'undefined') {
            ymaps.ready(function() {
                map = new ymaps.Map("delivery-map", {
                    center: officeCoords,
                    zoom: 10,
                    controls: ['zoomControl', 'fullscreenControl']
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –æ—Ñ–∏—Å–∞
                officePlacemark = new ymaps.Placemark(officeCoords, {
                    hintContent: '–ù–∞—à —Å–∫–ª–∞–¥',
                    balloonContent: '–≥. –°–ü–±, —É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ 46–ë, –æ—Ñ–∏—Å 310'
                }, {
                    preset: 'islands#redDotIcon',
                    iconColor: '#d32f2f'
                });

                map.geoObjects.add(officePlacemark);
                map.behaviors.disable('scrollZoom');

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
                map.events.add('click', function(e) {
                    if (!selectedVehicle) {
                        showInstruction('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã!');
                        return;
                    }

                    const coords = e.get('coords');
                    destinationCoords = coords;
                    calculateRoute(coords);
                });

                setTimeout(() => {
                    showInstruction('üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã, –∑–∞—Ç–µ–º –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
                }, 1000);
            });
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    function showInstruction(text) {
        const instruction = document.getElementById('mapInstruction');
        instruction.textContent = text;
        instruction.classList.add('show');
        
        setTimeout(() => {
            instruction.classList.remove('show');
        }, 3000);
    }

    // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ –º–µ—Ç–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    function clearMap() {
        if (currentRoute) {
            map.geoObjects.remove(currentRoute);
            currentRoute = null;
        }
        
        if (destinationPlacemark) {
            map.geoObjects.remove(destinationPlacemark);
            destinationPlacemark = null;
        }
    }

    // –†–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞
    function calculateRoute(coords) {
        if (!selectedVehicle || !map) return;

        clearMap();

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        destinationPlacemark = new ymaps.Placemark(coords, {
            hintContent: '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
            balloonContent: '–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'
        }, {
            preset: 'islands#blueDotIcon'
        });

        map.geoObjects.add(destinationPlacemark);

        // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç
        ymaps.route([officeCoords, coords]).then(function(route) {
            currentRoute = route;
            
            route.options.set({
                strokeColor: '#d32f2f',
                strokeWidth: 4,
                strokeOpacity: 0.7
            });
            
            map.geoObjects.add(route);
            
            const distance = route.getLength() / 1000;
            const isSpb = checkIfInSPB(coords);
            let price = calculatePrice(selectedVehicle.price, distance, isSpb);
            
            showDeliveryResult(price, distance, isSpb);
            
        }).catch(function(error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
            showInstruction('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤ –°–ü–±
    function checkIfInSPB(coords) {
        const spbBounds = {
            north: 60.1,
            south: 59.7,
            west: 29.4,
            east: 30.8
        };
        
        return coords[0] >= spbBounds.south && coords[0] <= spbBounds.north &&
               coords[1] >= spbBounds.west && coords[1] <= spbBounds.east;
    }

    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    function calculatePrice(basePrice, distance, isSpb) {
        if (!isSpb) return null;

        let price = basePrice + (distance * 50);
        const weightMultiplier = selectedVehicle.capacity / 5;
        price *= weightMultiplier;
        
        return Math.round(price);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    function showDeliveryResult(price, distance, isSpb) {
        const resultBlock = document.getElementById('deliveryResult');
        resultBlock.style.display = 'block';

        document.getElementById('resultVehicle').textContent = selectedVehicle.title;
        document.getElementById('resultDistance').textContent = `${distance.toFixed(1)} –∫–º`;
        document.getElementById('resultCapacity').textContent = `–¥–æ ${selectedVehicle.capacity} —Ç–æ–Ω–Ω`;
        document.getElementById('resultRegion').textContent = isSpb ? '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' : '–ó–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –°–ü–±';

        if (isSpb && price) {
            document.getElementById('resultPrice').textContent = `${price} ‚ÇΩ`;
            document.getElementById('resultNote').textContent = '–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è';
        } else {
            document.getElementById('resultPrice').textContent = '–£—Ç–æ—á–Ω–∏—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞';
            document.getElementById('resultNote').textContent = '–î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –°–ü–± —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã
    function setupVehicleSelection() {
        const vehicleCards = document.querySelectorAll('.vehicle-card');
        
        vehicleCards.forEach(card => {
            card.addEventListener('click', function() {
                vehicleCards.forEach(c => c.classList.remove('selected'));
                this.classList.add('selected');
                
                selectedVehicle = {
                    title: this.querySelector('.vehicle-title').textContent,
                    capacity: parseFloat(this.dataset.capacity),
                    price: parseFloat(this.dataset.price)
                };
                
                showInstruction('‚úÖ –¢–µ–ø–µ—Ä—å –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
                
                clearMap();
                const resultBlock = document.getElementById('deliveryResult');
                resultBlock.style.display = 'none';
                
                if (destinationCoords) {
                    calculateRoute(destinationCoords);
                }
            });
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    function init() {
        initDeliveryMap();
        setupVehicleSelection();
    }

    // –ó–∞–ø—É—Å–∫
    if (typeof ymaps !== 'undefined') {
        ymaps.ready(init);
    }
});